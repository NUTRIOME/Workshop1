if(transformation == "cube_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/3))
}else if(transformation == "square_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/2))
}else if(transformation == "log_2"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log2(metabolomicsDataGroups[,5:columns]))
}else if(transformation == "log_10"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log10(metabolomicsDataGroups[,5:columns]))
}else{print("Warning: name for transformation not recognized")}
## Visualize the data before and after transformation (for one sample to get an idea of suitability of transformation:
#create histogram for original distribution for first column with data
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
#create histogram for log-transformed distribution
hist(metabolomicsDataGroups_transformed[,5], col='coral2', main=transformation)
## Test if the transformation creates a normally distributed dataset (alpha >= 0.05)
##Calculate all Shapiro values for raw and transformed data:
metabolomicsDataGroups_Shapiro <- lapply(metabolomicsDataGroups[,5:columns], shapiro.test)
metabolomicsDataGroups_transformed_Shapiro <- lapply(metabolomicsDataGroups_transformed[,5:columns], shapiro.test)
#Obtain the p-values for raw and transformed data
metabolomicsDataGroups_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_Shapiro)
metabolomicsDataGroups_transformed_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_transformed_Shapiro)
## Count how often the p-value is above 0.05, to obtain an estimate of achieved normality due to transformation
metabolomicsDataGroups_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_transformed_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
seventyfive_percent <- floor(((columns)/10)*75)
#Print relevant information:
if(metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1] > seventyfive_percent ){paste0("Data after ", transformation ," transformation seems to follow a normal distribution for more then 80% of your data")} else{
print("Advised to select a different data transformation procedure")}
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1]
floor(((columns)/10)*75)
seventyfive_percent <- floor(((columns)/10)*7.5)
#Print relevant information:
if(metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1] > seventyfive_percent ){paste0("Data after ", transformation ," transformation seems to follow a normal distribution for more then 80% of your data")} else{
print("Advised to select a different data transformation procedure")}
# Visualize all information in a heatmap
heatmaply::heatmaply(metabolomicsDataGroups_transformed[,5:103], grid_gap = 0, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10))
if(!"rstatix" %in% installed.packages()){install.packages("rstatix")}
library(rstatix)
if(!"rstatix" %in% installed.packages()){install.packages("rstatix")}
library(rstatix)
qqPlot(metabolomicsDataGroups_transformed$XXL.VLDL.PL_.)
?qqPlot
??qqPlo
??qqPlot
qqPlot(metabolomicsDataGroups_transformed$'XXL.VLDL.PL_.')
if(!"car" %in% installed.packages()){install.packages("car")}
library(car)
if(!"nloptr" %in% installed.packages()){install.packages("nloptr")}
if(!"car" %in% installed.packages()){install.packages("car")}
R.version()
version
library(car) #(Companion to Applied Regression)
# check if libraries are already installed > otherwise install it
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager",repos = "http://cran.us.r-project.org")
if(!"dplyr" %in% installed.packages()) BiocManager::install("dplyr")
if(!"stringr" %in% installed.packages()){install.packages("stringr")}
#load libraries
library(dplyr)
library(stringr)
library(car) #(Companion to Applied Regression)
install.packages('car')
BiocManager::available('car')
BiocManager::install(car, type = "source", checkBuilt = TRUE)
BiocManager::install("car")
library(car) #(Companion to Applied Regression)
# Libraries
library(ggplot2)
library(dplyr)
library(forcats)
if(!"forcats" %in% installed.packages()){install.packages("forcats")}
library(forcats)
library(hrbrthemes)
if(!"hrbrthemes" %in% installed.packages()){install.packages("hrbrthemes")}
library(hrbrthemes)
#load libraries
library(dplyr)
#load libraries
library(dplyr)
library(stringr)
# check if libraries are already installed > otherwise install it
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager",repos = "http://cran.us.r-project.org")
if(!"dplyr" %in% installed.packages()) BiocManager::install("dplyr")
if(!"stringr" %in% installed.packages()){install.packages("stringr")}
#load libraries
library(dplyr)
library(stringr)
#Download ‘readxl’ package
#Load the ‘readxl’ package
library(readxl)
View(metabolomicsData)
View(metabolomicsData)
readxl("C:/Users/Tessa/Documents/GitHub/Workshop1/scripts/Data/NoMa_NMR_intervention_GEOcodes_Sent Susan")
#Download ‘readxl’ package
#Load the ‘readxl’ package
library(readxl)
readxl("C:/Users/Tessa/Documents/GitHub/Workshop1/scripts/Data/NoMa_NMR_intervention_GEOcodes_Sent Susan")
#Download ‘readxl’ package
#Load the ‘readxl’ package
library(readxl)
#Download ‘readxl’ package
#Load the ‘readxl’ package
install.packages("readxl")
# check if libraries are already installed > otherwise install it
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager",repos = "http://cran.us.r-project.org")
if(!"dplyr" %in% installed.packages()) BiocManager::install("dplyr")
if(!"stringr" %in% installed.packages()){install.packages("stringr")}
#load libraries
library(dplyr)
library(stringr)
library(readxl)
readxl("C:/Users/Tessa/Documents/GitHub/Workshop1/scripts/Data/NoMa_NMR_intervention_GEOcodes_Sent Susan")
install.packages("read.xls")
library(readxl)
#Download ‘readxl’ package
#Load the ‘readxl’ package
install.packages("read.csv")
BiocManager::install("readxl")
library(readxl)
getwd()
data <- read_excel("scripts/Data/NoMa_NMR_intervention_GEOcodes_Sent Susan.csv")
data <- read_excel("scripts/Data/NoMa_NMR_intervention_GEOcodes_Sent Susan.csv")
data <- read_excel("C:/Users/Tessa/Documents/GitHub/Workshop1scripts/Data/NoMa_NMR_intervention_GEOcodes_Sent Susan.csv")
library(readxl)
NoMa_NMR_intervention_GEOcodes_Sent_Susan <- read_excel("scripts/Data/NoMa_NMR_intervention_GEOcodes_Sent Susan.xlsx")
View(NoMa_NMR_intervention_GEOcodes_Sent_Susan)
data <- read_excel("scripts/Data/NoMa_NMR_intervention_GEOcodes_Sent Susan.xlsx")
NoMa_NMR_intervention_GEOcodes_Sent_Susan <- read_excel("scripts/Data/NoMa_NMR_intervention_GEOcodes_Sent Susan.xlsx")
NoMa_NMR_intervention_GEOcodes_Sent_Susan <- read_excel("C:/Users/Tessa/Documents/GitHub/Workshop1/scripts/Data/NoMa_NMR_intervention_GEOcodes_Sent Susan.xlsx")
data <- read_excel("C:/Users/Tessa/Documents/GitHub/Workshop1/scripts/Data/NoMa_NMR_intervention_GEOcodes_Sent Susan.xlsx")
getwd()
data <- read_excel("C:/Users/Tessa/Documents/GitHub/Workshop1/scripts/Data/NoMa_NMR_intervention_GEOcodes_Sent Susan.xlsx")
View(data)
View(data)
data_copy <- data
rm(data)
rm(data_copy)
metabolomicsData <- read_excel("C:/Users/Tessa/Documents/GitHub/Workshop1/scripts/Data/NoMa_NMR_intervention_GEOcodes_Sent Susan.xlsx")
metabolomicsData_copy <- data
metabolomicsData_copy <- metabolomicsData
# Convert the textual 'NA' labels with the real NA (not available)
metabolomicsData[metabolomicsData == "NA"] <- NA
rm()
read(metabolomicsData)
read(metabolomicsData)
View(metabolomicsData)
# Check how many NAs are part of sample '2_A5'.
sum(is.na(metabolomicsData$`Sample name` == "2_A5")) ##Fill in the missing information at the '...'
# Install the required package
install.packages("heatmaply")
install.packages("heatmaply")
library(heatmaply)
#Visualize this information in a heatmap
heatmaply::heatmaply(is.na10(metabolomicsData[,3:100], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10)))
?is.na10
# Make sure all data is captured as numbers (numeric!)
metabolomicsData <- data.frame(metabolomicsData[,1:2], lapply(metabolomicsData[,3:length(metabolomicsData)],as.numeric))
View(metabolomicsData)
View(metabolomicsData)
?lapply
head(metabolomicsData)
# Remove rows with too many NAs
metabolomicsData <- metabolomicsData[complete.cases(metabolomicsData[ , 3:length(metabolomicsData)]),]
?complete.cases
metabolomicsData <- read_excel("C:/Users/Tessa/Documents/GitHub/Workshop1/scripts/Data/NoMa_NMR_intervention_GEOcodes_Sent Susan.xlsx")
metabolomicsData_copy <- metabolomicsData
# Convert the textual 'NA' labels with the real NA (not available)
metabolomicsData[metabolomicsData == "NA"] <- NA
# Make sure all data is captured as numbers (numeric!)
metabolomicsData <- data.frame(metabolomicsData[,1:2], lapply(metabolomicsData[,3:length(metabolomicsData)],as.numeric))
# Remove rows with too many NAs
metabolomicsData_noNA <- metabolomicsData[complete.cases(metabolomicsData[ , 3:length(metabolomicsData)]),]
# Visualize all information in a heatmap
heatmap2 <- heatmaply::heatmaply(is.na10(metabolomicsData_noNA[,3:100], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10)))
heatmap2
View(metabolomicsData_noNA)
?heatmaply
#Visualize this information in a heatmap
heatmap1 <- heatmaply::heatmaply(is.na10(metabolomicsData[,3:100], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10)))
heatmap1
# Visualize all information in a heatmap
heatmap2 <- heatmaply::heatmaply(metabolomicsData_noNA[,3:100], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10)))
# Visualize all information in a heatmap
heatmap2 <- heatmaply::heatmaply(metabolomicsData_noNA[,3:100], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10))
heatmap2
View(heatmap2)
View(heatmap2)
#filter out data if the 'Sample name' column is NA
metabolomicsData <- subset(metabolomicsData, !is.na(metabolomicsData$'Sample name'))
metabolomicsData <- read_excel("C:/Users/Tessa/Documents/GitHub/Workshop1/scripts/Data/NoMa_NMR_intervention_GEOcodes_Sent Susan.xlsx")
# Convert the textual 'NA' labels with the real NA (not available)
metabolomicsData[metabolomicsData == "NA"] <- NA
# Make sure all data is captured as numbers (numeric!)
metabolomicsData <- data.frame(metabolomicsData[,1:2], lapply(metabolomicsData[,3:length(metabolomicsData)],as.numeric))
#filter out data if the 'Sample name' column is NA
metabolomicsData_samples <- subset(metabolomicsData, !is.na(metabolomicsData$'Sample name'))
metabolomicsData_samples
#filter out data if the 'Sample name' column is NA
metabolomicsData_samples <- subset(metabolomicsData, !is.na(metabolomicsData$'Sample.name'))
View(metabolomicsData_samples)
?read
metabolomicsData_samples
#filter out data if the 'Sample name' column is NA
metabolomicsData_samples <- subset(metabolomicsData_noNA, !is.na(metabolomicsData$'Sample.name'))
metabolomicsData_samples
View(metabolomicsData_samples)
#filter out data if the 'Sample name' column is NA
metabolomicsData_samples <- subset(metabolomicsData_noNA, !is.na(metabolomicsData_noNA$'Sample.name'))
View(metabolomicsData_samples)
# Inspect the remaining samples names; do any stand out (in a negative way)? If yes, remove these. Note: != stands for 'is not equal to'
metabolomicsData_samples2 <- subset(metabolomicsData_samples, metabolomicsData_samples$Sample.name != 'missing Gex')
View(metabolomicsData_samples2)
# Download the file 'targets.csv' from Surfdrive, add this to the Data folder, and change the location of data you want to load
dataLocation2 <- paste0(getwd(), '/Data/targets.csv')
# Load the targets data
treatmentData <- read.csv(dataLocation, header = TRUE)
# Load the targets data
treatmentData <- read.csv(dataLocation2, header = TRUE)
View(treatmentData)
# Clean up the sample names (since they are not the same for metabolomics)
treatmentData$SampleName<-gsub("X","",as.character(treatmentData$SampleName)) #Remove the 'X' from sample names
treatmentData$SampleName<-gsub("\\..*","",as.character(treatmentData$SampleName)) #Remove all data after the '.'
treatmentData$Timepoint<-gsub("line","",as.character(treatmentData$Timepoint)) #Remove the word 'line' in the second column (Timepoint)
#rename columns of treatmentData to match with metabolomics data
colnames(treatmentData) <- c("Sample.name","time","Diet")
# Inspect the remaining samples names; do any stand out (in a negative way)? If yes, remove these. Note: != stands for 'is not equal to'
metabolomicsData_samples <- subset(metabolomicsData_samples, metabolomicsData_samples$Sample.name != 'missing Gex')
rm(metabolomicsData_samples2)
# Finally, combine this data (specifically column 3 from targets data) with the metabolomics data
metabolomicsDataGroups <- merge(treatmentData, metabolomicsData_samples,by="Sample.name")
View(metabolomicsDataGroups)
# Finally, combine this data (specifically column 3 from targets data) with the metabolomics data
metabolomicsDataGroups <- merge(treatmentData, metabolomicsData_samples,by="Sample.name", "Time")
# Finally, combine this data (specifically column 3 from targets data) with the metabolomics data
metabolomicsDataGroups <- merge(treatmentData, metabolomicsData_samples,by="Sample.name", "time")
View(metabolomicsDataGroups)
# Load the targets data
treatmentData <- read.csv(dataLocation2, header = TRUE)
# Clean up the sample names (since they are not the same for metabolomics)
treatmentData$SampleName<-gsub("X","",as.character(treatmentData$SampleName)) #Remove the 'X' from sample names
treatmentData$SampleName<-gsub("\\..*","",as.character(treatmentData$SampleName)) #Remove all data after the '.'
treatmentData$Timepoint<-gsub("line","",as.character(treatmentData$Timepoint)) #Remove the word 'line' in the second column (Timepoint)
#filter out data if the 'Sample name' column is NA
metabolomicsData_samples <- subset(metabolomicsData_noNA, !is.na(metabolomicsData_noNA$'Sample.name'))
metabolomicsData_samples
# Inspect the remaining samples names; do any stand out (in a negative way)? If yes, remove these. Note: != stands for 'is not equal to'
metabolomicsData_samples <- subset(metabolomicsData_samples, metabolomicsData_samples$Sample.name != 'missing Gex')
# Finally, combine this data (specifically column 3 from targets data) with the metabolomics data
metabolomicsDataGroups <- merge(treatmentData, metabolomicsData_samples,by="Sample.name", "time")
#rename columns of treatmentData to match with metabolomics data
colnames(treatmentData) <- c("Sample.name","time","Diet")
# Finally, combine this data (specifically column 3 from targets data) with the metabolomics data
metabolomicsDataGroups <- merge(treatmentData, metabolomicsData_samples,by="Sample.name", "time")
View(metabolomicsDataGroups)
View(metabolomicsData_samples)
#rename columns of treatmentData to match with metabolomics data
colnames(treatmentData) <- c("Sample.name","Timepoint","Diet")
# Finally, combine this data (specifically column 3 from targets data) with the metabolomics data
metabolomicsDataGroups <- merge(treatmentData, metabolomicsData_samples,by="Sample.name", "time")
# Finally, combine this data (specifically column 3 from targets data) with the metabolomics data
metabolomicsDataGroups <- merge(treatmentData, metabolomicsData_samples,by="Sample.name")
View(metabolomicsDataGroups)
heatmap2
# Visualize all information in a heatmap
heatmap2 <- heatmaply::heatmaply(metabolomicsData_noNA[,3:100], grid_gap = 1, colors = heat.colors(100), showticklabels = c(T, F), margins = c(80, 10))
heatmap2
# Visualize all information in a heatmap
heatmap2 <- heatmaply::heatmaply(metabolomicsData_noNA[,3:100], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10))
# Visualize all information in a heatmap
heatmap2 <- heatmaply::heatmaply(metabolomicsData_noNA[,3:100], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10))
heatmap2
?heat.colors()
# Visualize all information in a heatmap
heatmap2 <- heatmaply::heatmaply(metabolomicsData_noNA[,3:100], grid_gap = 1, colors = heat.colors(200,rainbow), showticklabels = c(T, F), margins = c(80, 10))
# Visualize all information in a heatmap
heatmap2 <- heatmaply::heatmaply(metabolomicsData_noNA[,3:100], grid_gap = 1, colors = hcl.colors(200), showticklabels = c(T, F), margins = c(80, 10))
heatmap2
#Sanity check: do all the timepoints (base,end) from treatmentData match with the metabolomics data time column
all(metabolomicsDataGroups$Timepoint == metabolomicsDataGroups$time) ##If this is FALSE, please check your data against the Copy you made at the start.
#Count number of columns
columns <- ncol(metabolomicsDataGroups) ##To apply transformation on all columns
columns
#Count number of columns
columns <- ncol(metabolomicsDataGroups)##To apply transformation on all columns
columns <- 102 ##To use the actual data, not calculated ratios based on this data.
##Transformation (see https://doi.org/10.1177%2F1469066720918446 and https://www.statology.org/transform-data-in-r/)
##Users can select different transformation styles here:
transformation <- "log_2" # options are: log_2, log_10, square_root, cube_root
if(transformation == "cube_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/3))
}else if(transformation == "square_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/2))
}else if(transformation == "log_2"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log2(metabolomicsDataGroups[,5:columns]))
}else if(transformation == "log_10"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log10(metabolomicsDataGroups[,5:columns]))
}else{print("Warning: name for transformation not recognized")}
View(metabolomicsDataGroups_transformed)
if(transformation == "cube_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/3))
}else if(transformation == "square_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/2))
}else if(transformation == "log_2"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log2(metabolomicsDataGroups[,5:columns]))
}else if(transformation == "log_10"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log10(metabolomicsDataGroups[,5:columns]))
}else{print("Warning: name for transformation not recognized")}
## Visualize the data before and after transformation (for one sample to get an idea of suitability of transformation:
#create histogram for original distribution for first column with data
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
#create histogram for log-transformed distribution
hist(metabolomicsDataGroups_transformed[,5], col='coral2', main=transformation)
##Transformation (see https://doi.org/10.1177%2F1469066720918446 and https://www.statology.org/transform-data-in-r/)
##Users can select different transformation styles here:
transformation <- "log_10" # options are: log_2, log_10, square_root, cube_root
if(transformation == "cube_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/3))
}else if(transformation == "square_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/2))
}else if(transformation == "log_2"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log2(metabolomicsDataGroups[,5:columns]))
}else if(transformation == "log_10"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log10(metabolomicsDataGroups[,5:columns]))
}else{print("Warning: name for transformation not recognized")}
## Visualize the data before and after transformation (for one sample to get an idea of suitability of transformation:
#create histogram for original distribution for first column with data
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
#create histogram for log-transformed distribution
hist(metabolomicsDataGroups_transformed[,5], col='coral2', main=transformation)
## Test if the transformation creates a normally distributed dataset (alpha >= 0.05)
##Calculate all Shapiro values for raw and transformed data:
metabolomicsDataGroups_Shapiro <- lapply(metabolomicsDataGroups[,5:columns], shapiro.test)
metabolomicsDataGroups_transformed_Shapiro <- lapply(metabolomicsDataGroups_transformed[,5:columns], shapiro.test)
View(metabolomicsDataGroups_transformed)
View(metabolomicsDataGroups_Shapiro)
#Obtain the p-values for raw and transformed data
metabolomicsDataGroups_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_Shapiro)
metabolomicsDataGroups_transformed_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_transformed_Shapiro)
## Count how often the p-value is above 0.05, to obtain an estimate of achieved normality due to transformation
metabolomicsDataGroups_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
metabolomicsDataGroups_Shapiro_pvalues
metabolomicsDataGroups_transformed_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_transformed_Shapiro)
metabolomicsDataGroups_transformed_Shapiro_pvalues
?do.call
## Count how often the p-value is above 0.05, to obtain an estimate of achieved normality due to transformation
metabolomicsDataGroups_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_transformed_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
percentageThreshold <- floor(((columns)/10)*7.5) #Now set at 75% (7.5); can be strickter if the data permits this.
?floor
View(metabolomicsDataGroups_transformed_Shapiro_pvalues)
#Print relevant information:
if(metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1] > percentageThreshold ){paste0("Data after ", transformation ," transformation seems to follow a normal distribution for 75% or more of your data")} else{
print("Advised to select a different data transformation procedure")}
##Transformation (see https://doi.org/10.1177%2F1469066720918446 and https://www.statology.org/transform-data-in-r/)
##Users can select different transformation styles here:
transformation <- "log_2" # options are: log_2, log_10, square_root, cube_root
if(transformation == "cube_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/3))
}else if(transformation == "square_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/2))
}else if(transformation == "log_2"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log2(metabolomicsDataGroups[,5:columns]))
}else if(transformation == "log_10"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log10(metabolomicsDataGroups[,5:columns]))
}else{print("Warning: name for transformation not recognized")}
## Visualize the data before and after transformation (for one sample to get an idea of suitability of transformation:
#create histogram for original distribution for first column with data
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
#create histogram for log-transformed distribution
hist(metabolomicsDataGroups_transformed[,5], col='coral2', main=transformation)
## Test if the transformation creates a normally distributed dataset (alpha >= 0.05)
##Calculate all Shapiro values for raw and transformed data:
metabolomicsDataGroups_Shapiro <- lapply(metabolomicsDataGroups[,5:columns], shapiro.test)
#Obtain the p-values for raw and transformed data
metabolomicsDataGroups_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_Shapiro)
metabolomicsDataGroups_transformed_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_transformed_Shapiro)
## Count how often the p-value is above 0.05, to obtain an estimate of achieved normality due to transformation
metabolomicsDataGroups_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_transformed_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
percentageThreshold <- floor(((columns)/10)*7.5) #Now set at 75% (7.5); can be strickter if the data permits this.
#Print relevant information:
if(metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1] > percentageThreshold ){paste0("Data after ", transformation ," transformation seems to follow a normal distribution for 75% or more of your data")} else{
print("Advised to select a different data transformation procedure")}
##Transformation (see https://doi.org/10.1177%2F1469066720918446 and https://www.statology.org/transform-data-in-r/)
##Users can select different transformation styles here:
transformation <- "cube_root" # options are: log_2, log_10, square_root, cube_root
if(transformation == "cube_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/3))
}else if(transformation == "square_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/2))
}else if(transformation == "log_2"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log2(metabolomicsDataGroups[,5:columns]))
}else if(transformation == "log_10"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log10(metabolomicsDataGroups[,5:columns]))
}else{print("Warning: name for transformation not recognized")}
## Visualize the data before and after transformation (for one sample to get an idea of suitability of transformation:
#create histogram for original distribution for first column with data
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
#create histogram for log-transformed distribution
hist(metabolomicsDataGroups_transformed[,5], col='coral2', main=transformation)
## Test if the transformation creates a normally distributed dataset (alpha >= 0.05)
##Calculate all Shapiro values for raw and transformed data:
metabolomicsDataGroups_Shapiro <- lapply(metabolomicsDataGroups[,5:columns], shapiro.test)
metabolomicsDataGroups_transformed_Shapiro <- lapply(metabolomicsDataGroups_transformed[,5:columns], shapiro.test)
metabolomicsDataGroups_transformed_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_transformed_Shapiro)
## Count how often the p-value is above 0.05, to obtain an estimate of achieved normality due to transformation
metabolomicsDataGroups_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_transformed_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
percentageThreshold <- floor(((columns)/10)*7.5) #Now set at 75% (7.5); can be strickter if the data permits this.
#Print relevant information:
if(metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1] > percentageThreshold ){paste0("Data after ", transformation ," transformation seems to follow a normal distribution for 75% or more of your data")} else{
print("Advised to select a different data transformation procedure")}
View(metabolomicsDataGroups_transformed)
# Visualize all information in a heatmap
heatmap3 <- heatmaply::heatmaply(metabolomicsDataGroups_transformed[,5:100], grid_gap = 1, colors = hcl.colors(200), showticklabels = c(T, F), margins = c(80, 10))
heatmap3
# Libraries (dplyr already previously loaded but also important)
if(!"ggplot2" %in% installed.packages()){install.packages("ggplot2")}
library(ggplot2)
if(!"forcats" %in% installed.packages()){install.packages("forcats")}
library(forcats)
if(!"hrbrthemes" %in% installed.packages()){install.packages("hrbrthemes")}
library(hrbrthemes)
if(!"viridis" %in% installed.packages()){install.packages("viridis")}
library(viridis)
if(!"ggbeeswarm" %in% installed.packages()){install.packages("ggbeeswarm")}
library(ggbeeswarm)
##### Example data to check if setup of packages is correct #####
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/10_OneNumSevCatSubgroupsSevObs.csv", header=T, sep=",") %>%
mutate(tip = round(tip/total_bill*100, 1))
View(data)
# Grouped
data %>%
mutate(day = fct_reorder(day, tip)) #%>%
##### Example data to check if setup of packages is correct #####
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/10_OneNumSevCatSubgroupsSevObs.csv", header=T, sep=",") %>%
mutate(tip = round(tip/total_bill*100, 1))
?fct_reorder
fct_reorder
# Grouped
plot_data %>%
mutate(day = fct_reorder(day, tip)) %>%
mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) %>%
ggplot(aes(fill=sex, y=tip, x=day)) +
geom_violin(position="dodge", alpha=0.5, outlier.colour="transparent") +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
# Grouped
plot_data <- data %>%
mutate(day = fct_reorder(day, tip)) %>%
mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) %>%
ggplot(aes(fill=sex, y=tip, x=day)) +
geom_violin(position="dodge", alpha=0.5, outlier.colour="transparent") +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
?outlier.colour
?geom_violin
# Grouped
plot_data <- data %>%
mutate(day = fct_reorder(day, tip)) %>%
mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) %>%
ggplot(aes(fill=sex, y=tip, x=day)) +
geom_violin(position="dodge", alpha=0.5, colour="transparent") +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
# Grouped
plot <- data %>%
mutate(day = fct_reorder(day, tip)) %>%
mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) %>%
ggplot(aes(fill=sex, y=tip, x=day)) +
geom_violin(position="dodge", alpha=0.5, colour="transparent") +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
rm(plot_data)
plot
# Grouped
plot <- data %>%
mutate(day = fct_reorder(day, tip)) %>%
mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) %>%
ggplot(aes(fill=sex, y=tip, x=day)) +
geom_violin(position="dodge", alpha=0.5) +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
plot
# Grouped
plot <- data %>%
mutate(day = fct_reorder(day, tip)) %>%
mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) %>%
ggplot(aes(fill=sex, y=tip, x=day)) +
geom_violin(position="dodge", alpha=0.5) +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
plot
