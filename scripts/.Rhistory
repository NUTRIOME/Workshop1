na_col_fun <- colorRamp2(c(0, 1), c("white", "red"))
heatmap <- Heatmap(
is_na_matrix,
name = "NA presence",
col = na_col_fun,
show_row_names = TRUE,
show_column_names = FALSE,
column_title = "Columns 3 to 100",
row_title = "Samples",
heatmap_legend_param = list(
title = "NA presence",
at = c(0, 1),
labels = c("No", "Yes")
)
)
draw(heatmap)
#Visualize this information in a heatmap
fixed_na_matrix <- is.na(metabolomicsData[, 3:100])
#Visualize this information in a heatmap
fixed_na_matrix <- is.na(metabolomicsData[, 3:100])
# Define color mapping for the heatmap (1 for NA, 0 for non-NA)
# fixed_na_col_fun <- colorRamp2(c(0, 1), c("white", "red"))
heatmap <- Heatmap(
fixed_na_matrix,
name = "quantification",
# col = na_col_fun,
show_row_names = TRUE,
show_column_names = FALSE,
column_title = "Columns 3 to 100",
row_title = "Samples",
# heatmap_legend_param = list(
#   title = "quantification",
#   at = c(0, 1),
#   labels = c("No", "Yes")
# )
)
draw(heatmap)
# Define color mapping for the heatmap (1 for NA, 0 for non-NA)
fixed_na_col_fun <- colorRamp2(c(0, 1), c("white", "red"))
heatmap <- Heatmap(
fixed_na_matrix,
name = "quantification",
col = fixed_na_col_fun,
show_row_names = TRUE,
show_column_names = FALSE,
column_title = "Columns 3 to 100",
row_title = "Samples",
# heatmap_legend_param = list(
#   title = "quantification",
#   at = c(0, 1),
#   labels = c("No", "Yes")
# )
)
draw(heatmap)
#Visualize this information in a heatmap
fixed_na_matrix <- is.na(metabolomicsData[, 3:100])
# Define color mapping for the heatmap (1 for NA, 0 for non-NA)
fixed_na_col_fun <- colorRamp2(c(0, 10), c("white", "red"))
heatmap <- Heatmap(
fixed_na_matrix,
name = "quantification",
col = fixed_na_col_fun,
show_row_names = TRUE,
show_column_names = FALSE,
column_title = "Columns 3 to 100",
row_title = "Samples",
# heatmap_legend_param = list(
#   title = "quantification",
#   at = c(0, 1),
#   labels = c("No", "Yes")
# )
)
draw(heatmap)
#Visualize this information in a heatmap
fixed_na_matrix <- metabolomicsData[, 3:100]
# Define color mapping for the heatmap (1 for NA, 0 for non-NA)
fixed_na_col_fun <- colorRamp2(c(-1, 3), c("grey", "orange"))
heatmap <- Heatmap(
fixed_na_matrix,
name = "quantification",
col = fixed_na_col_fun,
show_row_names = TRUE,
show_column_names = FALSE,
column_title = "Columns 3 to 100",
row_title = "Samples",
# heatmap_legend_param = list(
#   title = "quantification",
#   at = c(0, 1),
#   labels = c("No", "Yes")
# )
)
draw(heatmap)
#Visualize this information in a heatmap
fixed_na_matrix <- metabolomicsData[, 3:100]
# Define color mapping for the heatmap (1 for NA, 0 for non-NA)
fixed_na_col_fun <- colorRamp2(c(-1, 3), c("black", "yellow"))
heatmap <- Heatmap(
fixed_na_matrix,
name = "quantification",
col = fixed_na_col_fun,
show_row_names = TRUE,
show_column_names = FALSE,
column_title = "Columns 3 to 100",
row_title = "Samples",
# heatmap_legend_param = list(
#   title = "quantification",
#   at = c(0, 1),
#   labels = c("No", "Yes")
# )
)
draw(heatmap)
#Visualize this information in a heatmap
fixed_na_matrix <- metabolomicsData[, 3:100]
# Define color mapping for the heatmap (1 for NA, 0 for non-NA)
fixed_na_col_fun <- colorRamp2(c(-1, 3), c("yellow", "black"))
heatmap <- Heatmap(
fixed_na_matrix,
name = "quantification",
col = fixed_na_col_fun,
show_row_names = TRUE,
show_column_names = FALSE,
column_title = "Columns 3 to 100",
row_title = "Samples",
# heatmap_legend_param = list(
#   title = "quantification",
#   at = c(0, 1),
#   labels = c("No", "Yes")
# )
)
draw(heatmap)
#Visualize this information in a heatmap
fixed_na_matrix <- metabolomicsData[, 3:100]
# Define color mapping for the heatmap (1 for NA, 0 for non-NA)
fixed_na_col_fun <- colorRamp2(c(min(metabolomicsData[, 3:100]), max(metabolomicsData[, 3:100])), c("yellow", "black"))
heatmap <- Heatmap(
fixed_na_matrix,
name = "quantification",
col = fixed_na_col_fun,
show_row_names = TRUE,
show_column_names = FALSE,
column_title = "Columns 3 to 100",
row_title = "Samples",
# heatmap_legend_param = list(
#   title = "quantification",
#   at = c(0, 1),
#   labels = c("No", "Yes")
# )
)
draw(heatmap)
#Visualize this information in a heatmap
fixed_na_matrix <- as.matrix(metabolomicsData[, 3:100])
# Define color mapping for the heatmap (1 for NA, 0 for non-NA)
fixed_na_col_fun <- colorRamp2(c(min(metabolomicsData[, 3:100]), max(metabolomicsData[, 3:100])), c("yellow", "black"))
heatmap <- Heatmap(
fixed_na_matrix,
name = "quantification",
col = fixed_na_col_fun,
show_row_names = TRUE,
show_column_names = FALSE,
column_title = "Columns 3 to 100",
row_title = "Samples",
# heatmap_legend_param = list(
#   title = "quantification",
#   at = c(0, 1),
#   labels = c("No", "Yes")
# )
)
draw(heatmap)
transformed_matrix <- as.matrix(metabolomicsDataGroups_transformed[, 5:columns])
# Define color mapping for the heatmap (1 for NA, 0 for non-NA)
# transformed_col_fun <- colorRamp2(c(min(metabolomicsData[, 3:100]), max(metabolomicsData[, 3:100])), c("yellow", "black"))
heatmap <- Heatmap(
fixed_na_matrix,
name = "quantification",
# col = fixed_na_col_fun,
show_row_names = TRUE,
show_column_names = FALSE,
column_title = "Columns 3 to 100",
row_title = "Samples",
# heatmap_legend_param = list(
#   title = "quantification",
#   at = c(0, 1),
#   labels = c("No", "Yes")
# )
)
draw(heatmap)
data[, 1:20] %>%
mutate(day = fct_reorder(day, tip)) %>%
mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) %>%
ggplot(aes(fill=sex, y=tip, x=day)) +
geom_violin(position="dodge", alpha=0.5) +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
View(data)
# Grouped
data[1:20, ] %>%
mutate(day = fct_reorder(day, tip)) %>%
mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) %>%
ggplot(aes(fill=sex, y=tip, x=day)) +
geom_violin(position="dodge", alpha=0.5) +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
# Grouped
data %>%
mutate(day = fct_reorder(day, tip)) %>%
mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) %>%
ggplot(aes(fill=sex, y=tip, x=day)) +
geom_violin(position="dodge", alpha=0.5) +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
# ##### Example data to check if setup of packages is correct #####
# # Load dataset from github
# data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/10_OneNumSevCatSubgroupsSevObs.csv", header=T, sep=",") %>%
#   mutate(tip = round(tip/total_bill*100, 1))
lipidClassName <- 'IDL.L'
columnNumber <- which( colnames(metabolomicsDataGroups_transformed)==lipidClassName )
maxVerticalAxis <- max(metabolomicsDataGroups_transformed[,columnNumber])
# Grouped
metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, IDL.L)) %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, y=IDL.L, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoints") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
View(metabolomicsDataGroups_transformed)
# ##### Example data to check if setup of packages is correct #####
# # Load dataset from github
# data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/10_OneNumSevCatSubgroupsSevObs.csv", header=T, sep=",") %>%
#   mutate(tip = round(tip/total_bill*100, 1))
lipidClassName <- 'XXL.VLDL.P'
columnNumber <- which( colnames(metabolomicsDataGroups_transformed)==lipidClassName )
maxVerticalAxis <- max(metabolomicsDataGroups_transformed[,columnNumber])
# Grouped
metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, IDL.L)) %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, y=IDL.L, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoints") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
# ##### Example data to check if setup of packages is correct #####
# # Load dataset from github
# data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/10_OneNumSevCatSubgroupsSevObs.csv", header=T, sep=",") %>%
#   mutate(tip = round(tip/total_bill*100, 1))
lipidClassName <- 'XXL.VLDL.P'
columnNumber <- which( colnames(metabolomicsDataGroups_transformed)==lipidClassName )
maxVerticalAxis <- max(metabolomicsDataGroups_transformed[,columnNumber])
# Grouped
metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, XXL.VLDL.P)) %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, y=XXL.VLDL.P, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoints") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
# ##### Example data to check if setup of packages is correct #####
# # Load dataset from github
# data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/10_OneNumSevCatSubgroupsSevObs.csv", header=T, sep=",") %>%
#   mutate(tip = round(tip/total_bill*100, 1))
lipidClassName <- 'IDL.P'
columnNumber <- which( colnames(metabolomicsDataGroups_transformed)==lipidClassName )
maxVerticalAxis <- max(metabolomicsDataGroups_transformed[,columnNumber])
# Grouped
metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, IDL.P)) %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, y=IDL.P, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoints") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
# ##### Example data to check if setup of packages is correct #####
# # Load dataset from github
# data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/10_OneNumSevCatSubgroupsSevObs.csv", header=T, sep=",") %>%
#   mutate(tip = round(tip/total_bill*100, 1))
lipidClassName <- 'IDL.L'
columnNumber <- which( colnames(metabolomicsDataGroups_transformed)==lipidClassName )
maxVerticalAxis <- max(metabolomicsDataGroups_transformed[,columnNumber])
# Grouped
metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, IDL.L)) %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, y=IDL.L, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoints") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
# ##### Example data to check if setup of packages is correct #####
# # Load dataset from github
# data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/10_OneNumSevCatSubgroupsSevObs.csv", header=T, sep=",") %>%
#   mutate(tip = round(tip/total_bill*100, 1))
lipidClassName <- 'XXL.VLDL.CE'
columnNumber <- which( colnames(metabolomicsDataGroups_transformed)==lipidClassName )
maxVerticalAxis <- max(metabolomicsDataGroups_transformed[,columnNumber])
# Grouped
metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, XXL.VLDL.CE)) %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, y=XXL.VLDL.CE, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoints") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
# ##### Example data to check if setup of packages is correct #####
# # Load dataset from github
# data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/10_OneNumSevCatSubgroupsSevObs.csv", header=T, sep=",") %>%
#   mutate(tip = round(tip/total_bill*100, 1))
lipidClassName <- 'IDL.C'
columnNumber <- which( colnames(metabolomicsDataGroups_transformed)==lipidClassName )
maxVerticalAxis <- max(metabolomicsDataGroups_transformed[,columnNumber])
# Grouped
metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, IDL.C)) %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, y=IDL.C, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoints") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
colnames(metabolomicsDataGroups_transformed[,5,drop=F])
for (i in 5:24) {
lipidClassName <- colnames(metabolomicsDataGroups_transformed[,i,drop=F])
columnNumber <- which( colnames(metabolomicsDataGroups_transformed)==lipidClassName )
maxVerticalAxis <- max(metabolomicsDataGroups_transformed[,columnNumber])
# Grouped
metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, cat(lipidClassName))) %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, y=cat(lipidClassName), x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoints") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
}
cat(lipidClassName)
for (i in 5:24) {
lipidClassName <- colnames(metabolomicsDataGroups_transformed[,i,drop=F])
columnNumber <- which( colnames(metabolomicsDataGroups_transformed)==lipidClassName )
maxVerticalAxis <- max(metabolomicsDataGroups_transformed[,columnNumber])
lipidClassName_cat <- cat(lipidClassName)
# Grouped
metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, lipidClassName_cat)) %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, y=lipidClassName_cat, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoints") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
}
for (i in 5:24) {
lipidClassName <- colnames(metabolomicsDataGroups_transformed[,i,drop=F])
columnNumber <- which( colnames(metabolomicsDataGroups_transformed)==lipidClassName )
maxVerticalAxis <- max(metabolomicsDataGroups_transformed[,columnNumber])
# Grouped
metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, .data[[lipidClassName]])) %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, y=.data[[lipidClassName]], x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoints") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
}
??show
for (i in 5:24) {
lipidClassName <- colnames(metabolomicsDataGroups_transformed[,i,drop=F])
columnNumber <- which( colnames(metabolomicsDataGroups_transformed)==lipidClassName )
maxVerticalAxis <- max(metabolomicsDataGroups_transformed[,columnNumber])
# Grouped
h <- metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, .data[[lipidClassName]])) %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, y=.data[[lipidClassName]], x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoints") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
plot(h)
}
suppressWarnings(
for (i in 5:24) {
lipidClassName <- colnames(metabolomicsDataGroups_transformed[,i,drop=F])
columnNumber <- which( colnames(metabolomicsDataGroups_transformed)==lipidClassName )
maxVerticalAxis <- max(metabolomicsDataGroups_transformed[,columnNumber])
# Grouped
h <- metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, .data[[lipidClassName]])) %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, y=.data[[lipidClassName]], x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoints") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
plot(h)
}
)
##Order columns based on Diet column (located in column names);
mSet_FINAL <- metabolomicsDataGroups_transformed[order(metabolomicsDataGroups_transformed$Diet),]
##Create one dataframe for the control group:
mSet_control <- subset(mSet_FINAL, mSet_FINAL$Diet == 'C_diet')
#Size of control group:
mSet_control_size <- nrow(mSet_control)
##Create another dataframe for the treated group:
mSet_treated <- subset(mSet_FINAL, mSet_FINAL$Diet == 'Ex_diet')
#Size of experimental group:
mSet_treated_size <- nrow(mSet_treated)
# The groups are of unequal size (which you would normally want to compensate for; we will take the data as it is)
##The unpaired two-samples t-test is used to compare the mean of two independent groups.
# T-test for one specified column:
#tTestresults <- t.test(mSet_control$XXL.VLDL.P, mSet_treated$XXL.VLDL.P, alternative = "two.sided", var.equal = FALSE)
# Ttest for all columns:
#####Task: create a variable 'grp' which uses the data in the 'Diet' column from the mSet_FINAL dataframe #####
tests_list <- lapply(names(mSet_FINAL[5:ncol(mSet_FINAL)]), function(x) t.test(as.formula(paste0(x, "~ grp")), data = mSet_FINAL[,5:ncol(mSet_FINAL)]))
grp <- mSet_FINAL$Diet
tests_list <- lapply(names(mSet_FINAL[5:ncol(mSet_FINAL)]), function(x) t.test(as.formula(paste0(x, "~ grp")), data = mSet_FINAL[,5:ncol(mSet_FINAL)]))
result <- do.call(rbind, lapply(tests_list, `[[`, "estimate"))
pval <- sapply(tests_list, `[[`, "p.value")
result <- cbind(names(mSet_FINAL[5:ncol(mSet_FINAL)]), result, p.value = pval)
View(result)
suppressWarnings(
for (i in 50:70) {
lipidClassName <- colnames(metabolomicsDataGroups_transformed[,i,drop=F])
columnNumber <- which( colnames(metabolomicsDataGroups_transformed)==lipidClassName )
maxVerticalAxis <- max(metabolomicsDataGroups_transformed[,columnNumber])
# Grouped
h <- metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, .data[[lipidClassName]])) %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, y=.data[[lipidClassName]], x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoints") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
plot(h)
}
)
tTestresults <- t.test(mSet_control$XXL.VLDL.P, mSet_treated$XXL.VLDL.P, alternative = "two.sided", var.equal = FALSE)
View(tTestresults)
View(result)
suppressWarnings(
for (i in 70:90) {
lipidClassName <- colnames(metabolomicsDataGroups_transformed[,i,drop=F])
columnNumber <- which( colnames(metabolomicsDataGroups_transformed)==lipidClassName )
maxVerticalAxis <- max(metabolomicsDataGroups_transformed[,columnNumber])
# Grouped
h <- metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, .data[[lipidClassName]])) %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, y=.data[[lipidClassName]], x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoints") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
plot(h)
}
)
